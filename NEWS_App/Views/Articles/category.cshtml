@model IEnumerable<ArticleLikeViewModel>

@{
    ViewData["Title"] = "Index";
}
@{
    var userId = HttpContextAccessor.HttpContext.Session.GetInt32("UserId") ?? 0;
    var username = HttpContextAccessor.HttpContext.Session.GetString("Username");

}

<h1>@ViewBag.CategoryName</h1>
<hr />
<div class="container">
    <div class="row">
        @foreach (var item in Model)
        {
            <div class="col-md-12 mb-4">
               
                    <div class="card rounded shadow-sm" style="border-radius: 15px; overflow: hidden;">
                        <!-- Rounded corners -->
                        <div class="row g-0">
                            <!-- Full left-side image with vertical line -->
                            <div class="col-md-4 position-relative">
                                @if (item.Article.ImageUrl != "No Images")
                                {
                                <img src="@item.Article.ImageUrl" class="img-fluid h-100" alt="Article Image" style="object-fit: cover; border-radius: 15px 0 0 15px;" />
                                }
                                else
                                {
                                    <img src="~/images/default-image.jpeg" class="img-fluid h-100" alt="Default Image" style="object-fit: cover; border-radius: 15px 0 0 15px;" />
                                }

                                <!-- Vertical line to separate image and content -->
                                <div style="position: absolute; top: 0; right: 0; width: 1px; height: 100%; background-color: #ccc;"></div>
                            </div>

                            <!-- Content (Title, Text) on the right -->
                            <div class="col-md-8 d-flex flex-column justify-content-between" style="padding: 20px;">
                                <!-- Added padding -->
                            <a href="@Url.Action("Unique", "Articles", new { category = item.Article.CategoryId, article = item.Article.Id })" style="text-decoration: none; color: inherit;">
                                <div class="card-body">
                                    <!-- Title -->
                                    <h5 class="card-title" style="font-weight: bold;">@item.Article.Title</h5>

                                    <!-- Truncated Content -->
                                    <p class="card-text text-truncate-multiline">@item.Article.Content</p> <!-- Content limited to 3 lines -->
                                </div>
                             </a>
                                <!-- Bottom section (Like button on left, Date on right) -->
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                    <button id="likeButton-@item.Article.Id" class="btn btn-sm @(item.IsLikedByUser ? "btn-success" : "btn-primary")"  onclick="likeArticle(@item.Article.Id)">
                                        <i class="fas fa-thumbs-up"></i> @(item.IsLikedByUser ? "Liked" : "Like")
                                        </button>
                                        <span id="likeCount-@item.Article.Id" class="ml-2">Likes: @item.Article.LikeCount</span>
                                    </div>
                                @if (username == "admin@gmail.com")
                                {
                                    <div>
                                          <button id="deleteButton-@item.Article.Id" class="btn btn-sm btn-danger" onclick="deleteArticle(@item.Article.Id)">
                                           <i class="fas fa-trash"></i> Delete
                                          </button>
                                    </div>
                                }
                                    <div>
                                    <small class="text-muted">Published on: @item.Article.PublishedDate.ToString("MM/dd/yyyy hh:mm tt")</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
              
            </div>
        }
    </div>
</div>

@section Styles {
    <style>
        .text-truncate-multiline {
            display: -webkit-box;
            -webkit-line-clamp: 3; /* Show only 3 lines */
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis; /* Add the ellipsis (...) */
        }
    </style>
}

@section Scripts {
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script> <!-- For icons -->
    <script>

        function likeArticle(articleId) {
            console.log("Like button clicked for article: " + articleId); // Log the button click

            $.ajax({
                url: '/Likes/Like',
                type: 'POST',
                data: { articleId: articleId },
                success: function (data) {
                    console.log("AJAX Success:", data);
                    if (data.redirectToLogin) {
                        // Redirect to the login page
                        window.location.href = '/User/Login'; // Adjust this URL according to your routing
                        return; // Stop further processing
                    }
                    // Update the button state based on whether the article was liked or unliked
                    if (data.liked) {
                        $('#likeButton-' + articleId)
                            .removeClass('btn-primary')
                            .addClass('btn-success')
                            .html('<i class="fas fa-thumbs-up"></i> Liked');
                    } else {
                        $('#likeButton-' + articleId)
                            .removeClass('btn-success')
                            .addClass('btn-primary')
                            .html('<i class="fas fa-thumbs-up"></i> Like');
                    }

                    $('#likeCount-' + articleId).text('Likes: ' + data.likeCount);
                },
                error: function (xhr, status, error) {
                    console.error("AJAX Error:", xhr, status, error); // Log the error details
                    alert("An error occurred while liking the article: " + error);
                }
            });
        }

        function deleteArticle(articleId) {
            console.log("delete button clicked for article: " + articleId); // Log the button click

                $.ajax({
                    url: '/Articles/Delete', // Make sure your ArticlesController has a corresponding Delete action
                    type: 'POST',
                  data: { id: articleId },
                    success: function (data) {
                         console.log("AJAX Success:", data);
                            alert('Article deleted successfully.');
                            location.reload(); 
                    },
                    error: function (xhr, status, error) {
                        console.error("AJAX Error:", xhr, status, error);
                        alert("An error occurred while deleting the article: " + error);
                    }
                });
        }

    </script>
}
